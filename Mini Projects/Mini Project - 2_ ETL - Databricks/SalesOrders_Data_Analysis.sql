-- Databricks notebook source
-- Customer Analysis: Which customers generate the most revenue?

-- Query to display the customer sales analysis
SELECT 
    so.customer_id,  -- The unique identifier for the customer
    c.customer_name,  -- The customer's name
    YEAR(so.order_date) AS SALES_ORDER_YEAR,  -- Extract the year from the order date
    COUNT(DISTINCT so.order_id) AS total_orders,  -- Count of distinct orders per customer
    SUM(so.total_price) AS total_revenue,  -- Sum of the total revenue generated by the customer
    AVG(so.total_price) AS avg_order_value  -- Average order value per customer
FROM 
    sample_catalog_v1.sample_schema_v1.sales_orders_table AS so  -- The sales orders table
LEFT JOIN 
    sample_catalog_v1.sample_schema_v1.customer_master_table AS c  -- The customer master table
ON 
    so.customer_id = c.customer_id  -- Join on customer_id to match orders to customers
GROUP BY 
    so.customer_id, c.customer_name, SALES_ORDER_YEAR  -- Group by customer and year of order
ORDER BY 
    SALES_ORDER_YEAR DESC, total_revenue DESC;  -- Order by year descending and revenue descending

-- COMMAND ----------

-- Product Analysis: What are the top-selling products?

-- Query to display the product sales analysis
SELECT 
    so.product_id,  -- The unique identifier for the product
    p.product_name,  -- The product's name
    YEAR(so.order_date) AS SALES_ORDER_YEAR,  -- Extract the year from the order date
    SUM(so.quantity) AS total_quantity_sold,  -- Total quantity sold of the product
    SUM(so.total_price) AS total_revenue,  -- Total revenue generated by the product
    AVG(so.total_price / so.quantity) AS avg_price_per_unit  -- Average price per unit of the product
FROM 
    sample_catalog_v1.sample_schema_v1.sales_orders_table AS so  -- The sales orders table
LEFT JOIN 
    sample_catalog_v1.sample_schema_v1.product_master_table AS p  -- The product master table
ON 
    so.product_id = p.product_id AND p.end_date > current_date()  -- Join on product_id and check if the product is active
GROUP BY 
    so.product_id, p.product_name, SALES_ORDER_YEAR  -- Group by product and year of order
ORDER BY 
    SALES_ORDER_YEAR DESC, total_revenue DESC;  -- Order by year descending and revenue descending

-- COMMAND ----------

-- Product Sales Trends Analysis: How do sales trends vary across time periods (daily, monthly, yearly)?

-- Query to display monthly sales trend analysis
SELECT 
    DATE_FORMAT(order_date, 'yyyy-MM') AS sales_month,  -- Format the order date as year-month
    SUM(total_price) AS total_revenue,  -- Total revenue for the month
    SUM(quantity) AS total_quantity  -- Total quantity sold for the month
FROM 
    sample_catalog_v1.sample_schema_v1.sales_orders_table  -- The sales orders table
GROUP BY 
    DATE_FORMAT(order_date, 'yyyy-MM')  -- Group by month and year
ORDER BY 
    sales_month;  -- Order by sales month in ascending order

-- COMMAND ----------

-- Customer Product Relation: Analysis on customer product purchase pattrens?

-- Query to display customer-product purchase patterns
SELECT 
    so.customer_id,  -- The unique identifier for the customer
    c.customer_name,  -- The customer's name
    so.product_id,  -- The unique identifier for the product
    p.product_name,  -- The product's name
    COUNT(DISTINCT so.order_id) AS order_count,  -- Count of distinct orders for each customer-product pair
    SUM(so.quantity) AS total_quantity,  -- Total quantity purchased by the customer for the product
    SUM(so.total_price) AS total_spent  -- Total money spent by the customer on the product
FROM 
    sample_catalog_v1.sample_schema_v1.sales_orders_table AS so  -- The sales orders table
JOIN 
    sample_catalog_v1.sample_schema_v1.customer_master_table AS c  -- The customer master table
ON 
    so.customer_id = c.customer_id  -- Join on customer_id to link orders with customers
JOIN 
    sample_catalog_v1.sample_schema_v1.product_master_table AS p  -- The product master table
ON 
    so.product_id = p.product_id  -- Join on product_id to link orders with products
GROUP BY 
    so.customer_id, c.customer_name, so.product_id, p.product_name  -- Group by customer and product
ORDER BY 
    total_spent DESC;  -- Order by total money spent in descending order


-- COMMAND ----------

-- Product Analysis: What is the average order value by customer or product?

-- Query to display the product order trend analysis
SELECT 
    p.product_name AS product_name,  -- The product's name
    COUNT(DISTINCT so.order_id) AS total_orders,  -- Count of distinct orders for the product
    SUM(so.total_price) AS total_revenue,  -- Total revenue generated by the product
    SUM(so.total_price) / COUNT(DISTINCT so.order_id) AS avg_order_value  -- Average order value for the product
FROM 
    sample_catalog_v1.sample_schema_v1.sales_orders_table AS so  -- The sales orders table
JOIN 
    sample_catalog_v1.sample_schema_v1.product_master_table AS p  -- The product master table
ON 
    so.product_id = p.product_id  -- Join on product_id to link orders with products
GROUP BY 
    p.product_name  -- Group by product name
ORDER BY 
    total_revenue DESC;  -- Order by total revenue in descending order